import React, { useEffect, useState } from 'react';
import { Input } from 'antd';
import { shiftApi } from '../../../../shared/api/shifts';
import styles from './PaymentModal.module.scss';

const { TextArea } = Input;

interface PaymentModalProps {
  visible: boolean;
  onClose: () => void;
  onPayment: (paymentMethod: 'cash' | 'card' | 'transfer', comment?: string, closedByUserId?: number) => void;
  orderTotal: number | string;
  guestName: string;
  bartenders?: { id: number; name: string }[];
}

const PaymentModal: React.FC<PaymentModalProps> = ({
  visible,
  onClose,
  onPayment,
  orderTotal,
  guestName,
  bartenders: bartendersProp
}) => {
  const [comment, setComment] = useState('');
  const [bartenders, setBartenders] = useState<{ id: number; name: string }[]>([]);
  const [selectedBartenderId, setSelectedBartenderId] = useState<number | undefined>(undefined);

  useEffect(() => {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –±–∞—Ä–º–µ–Ω—ã –ø—Ä–æ–ø—Å–æ–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö. –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É.
    const applyList = (list: { id: number; name: string }[]) => {
      setBartenders(list);
      if (list.length === 1) setSelectedBartenderId(list[0].id);
    };
    if (bartendersProp && Array.isArray(bartendersProp)) {
      applyList(bartendersProp);
    } else if (visible) {
      const loadActive = async () => {
        try {
          const resp = await shiftApi.getActive();
          const data: any = resp.data;
          const list = data && data.bartenders ? data.bartenders.map((b: any) => ({ id: b.user?.id ?? b.userId, name: b.user?.name ?? `#${b.userId}` })) : [];
          applyList(list);
        } catch (e) {
          applyList([]);
        }
      };
      loadActive();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [visible, bartendersProp]);

  if (!visible) return null;

  const handlePayment = (paymentMethod: 'cash' | 'card' | 'transfer') => {
    if (bartenders.length > 1 && !selectedBartenderId) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑');
      return;
    }
    onPayment(paymentMethod, comment || undefined, selectedBartenderId);
    setComment('');
    onClose();
  };

  const handleClose = () => {
    setComment('');
    onClose();
  };

  return (
    <div className={styles.overlay} onClick={handleClose}>
      <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
        <div className={styles.header}>
          <h3>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</h3>
          <button className={styles.closeBtn} onClick={handleClose}>
            √ó
          </button>
        </div>

        <div className={styles.content}>
          <div className={styles.orderInfo}>
            <div className={styles.guestName}>–ì–æ—Å—Ç—å: {guestName}</div>
            <div className={styles.totalAmount}>
              –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <strong>{parseFloat(orderTotal.toString()).toFixed(2)} ‚Çæ</strong>
            </div>
          </div>

          {bartenders.length > 0 && (
            <div style={{ margin: '8px 0' }}>
              <label style={{ display: 'block', marginBottom: 4 }}>–ö—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑:</label>
              <select
                value={selectedBartenderId ?? ''}
                onChange={(e) => setSelectedBartenderId(e.target.value ? Number(e.target.value) : undefined)}
                className={styles.select}
              >
                <option value="">‚Äî –≤—ã–±—Ä–∞—Ç—å ‚Äî</option>
                {bartenders.map(b => (
                  <option key={b.id} value={b.id}>{b.name}</option>
                ))}
              </select>
              {bartenders.length > 1 && (
                <div style={{ fontSize: 12, color: '#999', marginTop: 4 }}>
                  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–º–µ–Ω–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ —Å–º–µ–Ω–µ
                </div>
              )}
            </div>
          )}

          <div className={styles.commentSection}>
            <label htmlFor="payment-comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
            <TextArea
              id="payment-comment"
              value={comment}
              onChange={(e) => setComment(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
              rows={3}
              className={styles.commentInput}
            />
          </div>

          <div className={styles.paymentMethods}>
            <h4>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</h4>
            <div className={styles.methodButtons}>
              <button
                className={`${styles.methodBtn} ${styles.cashBtn}`}
                onClick={() => handlePayment('cash')}
              >
                üíµ –ù–∞–ª–∏—á–Ω—ã–µ
              </button>
              <button
                className={`${styles.methodBtn} ${styles.cardBtn}`}
                onClick={() => handlePayment('card')}
              >
                üí≥ –ö–∞—Ä—Ç–∞
              </button>
              <button
                className={`${styles.methodBtn} ${styles.transferBtn}`}
                onClick={() => handlePayment('transfer')}
              >
                üì± –ü–µ—Ä–µ–≤–æ–¥
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentModal;
